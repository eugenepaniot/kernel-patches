diff -ur linux-2.6.18.x86_64-o/drivers/xen/blkback/blkback.c linux-2.6.18.x86_64/drivers/xen/blkback/blkback.c
--- linux-2.6.18.x86_64-o/drivers/xen/blkback/blkback.c	2010-03-24 15:24:15.000000000 +0300
+++ linux-2.6.18.x86_64/drivers/xen/blkback/blkback.c	2010-03-25 20:03:59.000000000 +0300
@@ -53,7 +53,7 @@
  * This will increase the chances of being able to write whole tracks.
  * 64 should be enough to keep us competitive with Linux.
  */
-static int blkif_reqs = 64;
+static int blkif_reqs = 128;
 module_param_named(reqs, blkif_reqs, int, 0);
 MODULE_PARM_DESC(reqs, "Number of blkback requests to allocate");
 
@@ -199,6 +199,27 @@
 	blkif->st_oo_req = 0;
 }
 
+static void refill_reqcount(blkif_t *blkif)
+{
+	uint j = jiffies_to_msecs(jiffies - blkif->reqtime) / 1000;
+	if(!j)
+		j=1;
+
+	blkif->reqcount += blkif->reqfill * j ;
+	blkif->reqtime = jiffies + msecs_to_jiffies(1000 * blkif->reqtick);
+	if (blkif->reqcount > blkif->reqmax)
+		blkif->reqcount = blkif->reqmax;
+	if (blkif->reqfill > blkif->reqmax)
+		blkif->reqfill = blkif->reqmax;
+	if (blkif->reqtick > 255)
+		blkif->reqtick = 255;
+
+	if (debug_lvl)
+                printk(KERN_WARNING
+			"refill_reqcount [%s]: reqcount=%d reqmax=%d reqtime=%ld jiffies=%ld reqtick=%d difftime=%u \n", 
+			current->comm, blkif->reqcount, blkif->reqmax, blkif->reqtime, jiffies, blkif->reqtick, j);
+}
+
 int blkif_schedule(void *arg)
 {
 	blkif_t *blkif = arg;
@@ -225,6 +246,11 @@
 
 		if (log_stats && time_after(jiffies, blkif->st_print))
 			print_stats(blkif);
+		if (time_after(jiffies, blkif->reqtime) && 
+		    blkif->reqmax > 0 && 
+		    blkif->reqfill > 0 && 
+		    blkif->reqtick > 0)
+                      		refill_reqcount(blkif);
 	}
 
 	if (log_stats)
@@ -303,11 +329,24 @@
 	rp = blk_rings->common.sring->req_prod;
 	rmb(); /* Ensure we see queued requests up to 'rp'. */
 
+        if (blkif->reqcount <= 0 && blkif->reqmax > 0 && blkif->reqfill > 0)
+	           return (rc != rp) ? 1 : 0;
+
 	while ((rc != rp)) {
 
 		if (RING_REQUEST_CONS_OVERFLOW(&blk_rings->common, rc))
 			break;
 
+		if (blkif->reqmax > 0 && 
+		    blkif->reqfill > 0 && 
+		    blkif->reqtick > 0) {
+	                if (blkif->reqcount <= 0) {
+        	                more_to_do = 1;
+                	        break;
+	                }
+			--blkif->reqcount;
+		}
+
 		pending_req = alloc_req();
 		if (NULL == pending_req) {
 			blkif->st_oo_req++;
diff -ur linux-2.6.18.x86_64-o/drivers/xen/blkback/common.h linux-2.6.18.x86_64/drivers/xen/blkback/common.h
--- linux-2.6.18.x86_64-o/drivers/xen/blkback/common.h	2010-03-24 15:24:15.000000000 +0300
+++ linux-2.6.18.x86_64/drivers/xen/blkback/common.h	2010-03-24 15:22:31.000000000 +0300
@@ -47,6 +47,10 @@
 	pr_debug("(file=%s, line=%d) " _f,	\
 		 __FILE__ , __LINE__ , ## _a )
 
+#ifndef USHRT_MAX
+#define USHRT_MAX 0xffff
+#endif
+
 struct vbd {
 	blkif_vdev_t   handle;      /* what the domain refers to this vbd as */
 	unsigned char  readonly;    /* Non-zero -> read-only */
@@ -93,6 +97,13 @@
 
 	grant_handle_t shmem_handle;
 	grant_ref_t    shmem_ref;
+
+        /* qos information */
+	ulong			reqtime;
+	int			reqcount;
+	unsigned char		reqtick;
+	unsigned short		reqmax;
+	unsigned short		reqfill;
 } blkif_t;
 
 blkif_t *blkif_alloc(domid_t domid);
diff -ur linux-2.6.18.x86_64-o/drivers/xen/blkback/xenbus.c linux-2.6.18.x86_64/drivers/xen/blkback/xenbus.c
--- linux-2.6.18.x86_64-o/drivers/xen/blkback/xenbus.c	2010-03-24 15:24:15.000000000 +0300
+++ linux-2.6.18.x86_64/drivers/xen/blkback/xenbus.c	2010-03-25 20:05:56.000000000 +0300
@@ -112,6 +112,108 @@
 	}								\
 	static DEVICE_ATTR(name, S_IRUGO, show_##name, NULL)
 
+/****************************************************************
+ * QoS interface for VBD  
+ */
+
+static ssize_t vbd_limit_ret (int *var, const char *page, size_t count)
+{
+        char *p = (char *) page;
+        *var = simple_strtoul(p, &p, 10);
+        return count;
+}
+
+static ssize_t store_reqtick(struct device *_dev,
+                     struct device_attribute *attr,
+                     const char *buf,
+                     size_t count)
+{
+                struct xenbus_device *dev = to_xenbus_device(_dev);
+                struct backend_info *be = dev->dev.driver_data;
+                int new_val;
+                int ret = vbd_limit_ret(&new_val, (buf), count);
+                if(new_val < 1)
+                        return -EINVAL;
+		if(new_val > 255)
+			new_val = 255;
+                be->blkif->reqtick = new_val;
+                return ret;
+}
+
+static ssize_t store_reqfill(struct device *_dev,
+                     struct device_attribute *attr,
+                     const char *buf,
+                     size_t count)
+{
+                struct xenbus_device *dev = to_xenbus_device(_dev);
+                struct backend_info *be = dev->dev.driver_data;
+                int new_val;
+                int ret = vbd_limit_ret(&new_val, (buf), count);
+		if(new_val < 0)
+                        return -EINVAL;
+                if(new_val > USHRT_MAX)
+                        new_val = USHRT_MAX;
+		if(new_val > be->blkif->reqmax)
+			new_val = be->blkif->reqmax;
+                be->blkif->reqfill = new_val;
+                return ret;
+} 
+
+static ssize_t store_reqmax(struct device *_dev,
+                     struct device_attribute *attr,
+                     const char *buf,
+                     size_t count)
+{
+                struct xenbus_device *dev = to_xenbus_device(_dev);
+                struct backend_info *be = dev->dev.driver_data;
+                int new_val;
+                int ret = vbd_limit_ret(&new_val, (buf), count);
+		if(new_val < 0)
+                        return -EINVAL;
+                if(new_val > USHRT_MAX)
+                        new_val = USHRT_MAX;
+                be->blkif->reqmax = new_val;
+                return ret;
+} 
+
+static ssize_t store_reqcount(struct device *_dev,
+                     struct device_attribute *attr,
+                     const char *buf,
+                     size_t count)
+{
+                struct xenbus_device *dev = to_xenbus_device(_dev);
+                struct backend_info *be = dev->dev.driver_data;
+                int new_val;
+                int ret = vbd_limit_ret(&new_val, (buf), count);
+		if(new_val < 0)
+                        return -EINVAL;
+                if(new_val > USHRT_MAX)
+                        new_val = USHRT_MAX;
+		if(new_val > be->blkif->reqmax)
+                        new_val = be->blkif->reqmax;
+                be->blkif->reqcount = new_val;
+                return ret;
+}
+
+
+#define VBD_LIMIT(name, arg...)							\
+	static ssize_t 								\
+	show_##name(struct device *_dev,					\
+		    struct device_attribute *attr, 				\
+		    char *buf) 							\
+	{									\
+		struct xenbus_device *dev = to_xenbus_device(_dev);		\
+	        struct backend_info *be = dev->dev.driver_data;			\
+										\
+		return sprintf(buf, "%d\n", ##arg);				\
+	}									\
+	static DEVICE_ATTR(name,  S_IRUGO | S_IWUSR, show_##name, store_##name)
+
+VBD_LIMIT(reqfill,  be->blkif->reqfill);
+VBD_LIMIT(reqmax,   be->blkif->reqmax);
+VBD_LIMIT(reqcount, be->blkif->reqcount);
+VBD_LIMIT(reqtick,  be->blkif->reqtick);
+
 VBD_SHOW(oo_req,  "%d\n", be->blkif->st_oo_req);
 VBD_SHOW(rd_req,  "%d\n", be->blkif->st_rd_req);
 VBD_SHOW(wr_req,  "%d\n", be->blkif->st_wr_req);
@@ -132,6 +234,19 @@
 	.attrs = vbdstat_attrs,
 };
 
+static struct attribute *vbdlimit_attrs[] = {
+	&dev_attr_reqfill.attr,
+	&dev_attr_reqmax.attr,
+	&dev_attr_reqcount.attr,
+	&dev_attr_reqtick.attr,
+	NULL
+};
+
+static struct attribute_group vbdlimit_group = {
+        .name = "limit",
+        .attrs = vbdlimit_attrs,
+};
+
 VBD_SHOW(physical_device, "%x:%x\n", be->major, be->minor);
 VBD_SHOW(mode, "%s\n", be->mode);
 
@@ -147,12 +262,17 @@
 	if (error)
 		goto fail2;
 
-	error = sysfs_create_group(&dev->dev.kobj, &vbdstat_group);
-	if (error)
-		goto fail3;
+        error = sysfs_create_group(&dev->dev.kobj, &vbdstat_group);
+        if (error)
+                goto fail3;
+
+	error = sysfs_create_group(&dev->dev.kobj, &vbdlimit_group);
+        if (error)
+                goto fail4;
 
 	return 0;
 
+fail4:  sysfs_remove_group(&dev->dev.kobj, &vbdlimit_group);
 fail3:	sysfs_remove_group(&dev->dev.kobj, &vbdstat_group);
 fail2:	device_remove_file(&dev->dev, &dev_attr_mode);
 fail1:	device_remove_file(&dev->dev, &dev_attr_physical_device);
@@ -162,6 +282,7 @@
 void xenvbd_sysfs_delif(struct xenbus_device *dev)
 {
 	sysfs_remove_group(&dev->dev.kobj, &vbdstat_group);
+	sysfs_remove_group(&dev->dev.kobj, &vbdlimit_group);
 	device_remove_file(&dev->dev, &dev_attr_mode);
 	device_remove_file(&dev->dev, &dev_attr_physical_device);
 }
@@ -241,6 +362,57 @@
 	return err;
 }
 
+static void blkback_read_limit(struct xenbus_transaction xbt, 
+				struct xenbus_device *dev)
+{
+	struct backend_info *be = dev->dev.driver_data;
+
+	char *s, *e;
+	uint f, m, t;
+	char *ratestr;
+
+	be->blkif->reqfill = 0;
+	be->blkif->reqmax = 0;
+	be->blkif->reqtick = 1;
+
+	ratestr = xenbus_read(xbt, dev->nodename, "limit", NULL);
+	if (IS_ERR(ratestr))
+		return;
+
+	s = ratestr;
+	f = simple_strtoul(s, &e, 10);
+	if ((s == e) || (*e != ':'))
+		goto fail;
+
+        s = e + 1;
+        m = simple_strtoul(s, &e, 10);
+        if ((s == e) || (*e != ':'))
+                goto fail;
+	
+	s = e + 1;
+	t = simple_strtoul(s, &e, 10);
+	if ((s == e) || (*e != '\0'))
+		goto fail;
+	
+	if ((f > USHRT_MAX) || (m > USHRT_MAX) || (t > 255) ||
+	    (f < 0) || (m < 0) || (t < 1) ||
+	    (f > m))
+		goto fail;
+
+	be->blkif->reqfill = f;
+	be->blkif->reqmax = m;
+	be->blkif->reqtick = t;
+
+	kfree(ratestr);
+	return;
+
+fail:
+	printk(KERN_WARNING
+			"Failed to parse I/O limit. "
+			"I/O operations are unlimited. \n");
+	kfree(ratestr);
+}
+
 
 /**
  * Callback received when the hotplug scripts have placed the physical-device
@@ -289,6 +461,16 @@
 		return;
 	}
 
+	blkback_read_limit(XBT_NIL, dev);
+
+        be->blkif->reqtime  = jiffies;
+        be->blkif->reqcount = be->blkif->reqmax;
+
+        printk(KERN_WARNING
+                "blkback: [%d] reqfil=%d reqmax=%d recount=%d reqtick=%d \n", be->blkif->domid,
+                                                                              be->blkif->reqfill, be->blkif->reqmax,
+                                                                              be->blkif->reqcount, be->blkif->reqtick);
+
 	if (be->major == 0 && be->minor == 0) {
 		/* Front end dir is a number, which is used as the handle. */
 
